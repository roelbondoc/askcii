#!/usr/bin/env ruby
# frozen_string_literal: true

# Find the right load path
$LOAD_PATH.unshift File.expand_path('../lib', __dir__)
require 'askcii'
require 'optparse'

Askcii.setup_database
Askcii.configure_llm
Askcii.require_models

# Parse command-line options
options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: askcii [options] 'Your prompt here'"

  opts.on('-p', '--private', 'Start a private session and do not record') do
    options[:private] = true
  end

  opts.on('-r', '--last-response', 'Output the last response') do
    options[:last_response] = true
  end

  opts.on('-c', '--configure', 'Configure API key, endpoint, and model ID') do
    options[:configure] = true
  end

  opts.on('-h', '--help', 'Show this help message') do
    puts opts
    exit
  end
end

# Parse options, keeping remaining arguments in ARGV
opt_parser.parse!

# Handle configuration if requested
if options[:configure]
  puts 'Configuring askcii...'

  # Prompt for API key
  print 'Enter API key: '
  api_key = gets.chomp

  # Prompt for API endpoint
  print "Enter API endpoint: "
  api_endpoint = gets.chomp

  # Prompt for model ID
  print 'Enter model ID: '
  model_id = gets.chomp

  # Save configuration to database
  Askcii::Config.set('api_key', api_key) unless api_key.empty?
  Askcii::Config.set('api_endpoint', api_endpoint) unless api_endpoint.empty?
  Askcii::Config.set('model_id', model_id) unless model_id.empty?

  puts 'Configuration saved successfully!'
  exit 0
end

model_id = Askcii::Config.model_id || ENV['ASKCII_MODEL_ID']

if options[:private]
  context = SecureRandom.hex(8)
  chat = RubyLLM.chat(
    model: model_id,
    provider: :openai,
    assume_model_exists: true
  )
else
  context = ENV['ASKCII_SESSION'] || SecureRandom.hex(8)
  chat_record = Askcii::Chat.find_or_create(context: context, model_id: model_id)
  chat = chat_record.to_llm

  # Output last response if requested
  if options[:last_response]
    last_message = chat_record.messages.where(role: 'assistant').last
    if last_message
      puts last_message.content
      exit 0
    else
      puts 'No previous response found.'
      exit 1
    end
  end
end

# Process input
input = nil
input = $stdin.read unless $stdin.tty?

prompt = ARGV.join(' ')

if prompt.empty?
  puts 'Usage:'
  puts "  askcii [options] 'Your prompt here'"
  puts "  echo 'Your prompt here' | askcii 'Your prompt here'"
  puts "  askcii 'Your prompt here' < prompt.txt"
  puts '  askcii -p (start a private session)'
  puts '  askcii -r (to get the last response)'
  puts '  askcii -c (to configure API key, endpoint, and model ID)'
  puts "\nOptions:"
  puts '  -p, --private         Start a private session and do not record'
  puts '  -r, --last-response   Output the last response'
  puts '  -c, --configure       Configure API key, endpoint, and model ID'
  puts '  -h, --help            Show help'
  exit 1
end

chat.with_instructions 'You are a command line application. Your responses should be suitable to be read in a terminal. Your responses should only include the necessary text. Do not include any explanations unless prompted for it.'
prompt = "With the following text:\n\n#{input}\n\n#{prompt}" if input

chat.ask(prompt) do |chunk|
  print chunk.content
end
puts ''
